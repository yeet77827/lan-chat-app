/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chatapplication;

import static chatapplication.MulticastClient.name;
import static chatapplication.MulticastClient.s;
import java.net.*;
import java.io.*;
import java.util.*;
import javax.swing.JOptionPane;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.awt.Color;
import java.net.URL;
import java.nio.charset.StandardCharsets;

/**
 *
 * @author Pinder
 */
public class MulticastClient extends javax.swing.JFrame {
    public static String name;
    public static String message;
    public static MulticastSocket socket = null;
    public static InetAddress address;
    public static DatagramSocket s = null;
    private boolean isTyping = false; // Track typing state
    private boolean isDarkTheme = false; // Track theme state

    /**
     * Creates new form MulticastServerThread
     */
    public MulticastClient() {
        // Initialize the GUI components
        initComponents();
        this.setLocationRelativeTo(null);
        applyLightTheme(); // Set default theme
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton8.setText("Daily Verse");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jButton6.setText("Toggle Theme");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton4.setText("Import Chat");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Export Chat");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton1.setText("Send");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Calibri Light", 0, 18));
        jTextArea1.setRows(5);
        jTextArea1.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea2.setColumns(20);
        jTextArea2.setFont(new java.awt.Font("Gabriola", 1, 24));
        jTextArea2.setRows(5);
        jTextArea2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                if (!isTyping) {
                    isTyping = true;
                    sendTypingIndicator(true);
                }
            }
        });
        jScrollPane2.setViewportView(jTextArea2);

        jLabel1.setFont(new java.awt.Font("Gabriola", 1, 24));
        jLabel1.setText("Enter  your  message  here");

        jButton2.setText("Exit from Chat");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Gabriola", 1, 24));
        jLabel2.setText("Chat Window");

        jTextArea3.setEditable(false);
        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        jLabel3.setFont(new java.awt.Font("Gabriola", 1, 24));
        jLabel3.setText("Online users");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(73, 73, 73)
                                .addComponent(jButton2)))
                        .addGap(0, 163, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jButton2)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>

    private void applyLightTheme() {
        jTextArea1.setBackground(Color.WHITE);
        jTextArea1.setForeground(Color.BLACK);
        jTextArea2.setBackground(Color.WHITE);
        jTextArea2.setForeground(Color.BLACK);
        jTextArea3.setBackground(Color.WHITE);
        jTextArea3.setForeground(Color.BLACK);
        isDarkTheme = false;
    }

    private void applyDarkTheme() {
        Color armyGreen = new Color(75, 83, 32); // Army green color
        jTextArea1.setBackground(armyGreen);
        jTextArea1.setForeground(Color.WHITE);
        jTextArea2.setBackground(armyGreen);
        jTextArea2.setForeground(Color.WHITE);
        jTextArea3.setBackground(armyGreen);
        jTextArea3.setForeground(Color.WHITE);
        isDarkTheme = true;
    }

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {
        if (isDarkTheme) {
            applyLightTheme();
        } else {
            applyDarkTheme();
        }
    }

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {
        String verse = fetchVerse();
        JOptionPane.showMessageDialog(this, verse, "Daily Bible Verse", JOptionPane.INFORMATION_MESSAGE);
    }

    private String fetchVerse() {
        try {
            // Use a predefined verse for simplicity (John 3:16, ASV)
            String urlString = "https://cdn.jsdelivr.net/gh/wldeh/bible-api/bibles/en-asv/books/john/chapters/3/verses/16.json";
            URL url = new URL(urlString);
            HttpURLConnection conn = (HttpURLConnection) url.openConnection();
            conn.setRequestMethod("GET");
            conn.connect();

            int responseCode = conn.getResponseCode();
            if (responseCode == 200) {
                BufferedReader reader = new BufferedReader(new InputStreamReader(conn.getInputStream(), StandardCharsets.UTF_8));
                StringBuilder response = new StringBuilder();
                String line;
                while ((line = reader.readLine()) != null) {
                    response.append(line);
                }
                reader.close();

                // Parse JSON manually (simple extraction for "text" field)
                String json = response.toString();
                String textMarker = "\"text\":";
                int textStart = json.indexOf(textMarker) + textMarker.length() + 1;
                int textEnd = json.indexOf("\"", textStart);
                String verseText = json.substring(textStart, textEnd);

                // Include reference
                return "John 3:16 (ASV)\n" + verseText;
            }
        } catch (IOException e) {
            System.err.println("API fetch failed: " + e.getMessage());
        }

        // Fallback to local file
        try (BufferedReader reader = new BufferedReader(new FileReader("verses.txt"))) {
            List<String> verses = new ArrayList<>();
            String line;
            while ((line = reader.readLine()) != null) {
                if (!line.trim().isEmpty()) {
                    verses.add(line);
                }
            }
            if (!verses.isEmpty()) {
                return verses.get(new Random().nextInt(verses.size()));
            }
        } catch (IOException e) {
            System.err.println("Local file read failed: " + e.getMessage());
        }

        // Default verse if both API and file fail
        return "John 3:16 (ASV)\nFor God so loved the world, that he gave his only begotten Son, that whosoever believeth on him should not perish, but have eternal life.";
    }

    private void sendTypingIndicator(boolean typing) {
        String typingMessage = typing ? "TYPING#" + name : "STOP_TYPING#" + name;
        try {
            byte[] buf = typingMessage.getBytes();
            InetAddress group = InetAddress.getByName("230.0.0.1");
            DatagramPacket packet = new DatagramPacket(buf, buf.length, group, 4446);
            s.send(packet);
        } catch (IOException e) {
            System.err.println(e);
        }
    }

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {
        // Create a file chooser
        JFileChooser fileChooser = new JFileChooser();
        // Set a filter to show only .txt files
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text Files (*.txt)", "txt");
        fileChooser.setFileFilter(filter);
        // Show the file chooser dialog
        int result = fileChooser.showOpenDialog(this);
        // If a file is selected, read its contents
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            try (BufferedReader reader = new BufferedReader(new FileReader(selectedFile))) {
                StringBuilder fileContent = new StringBuilder();
                String line;
                while ((line = reader.readLine()) != null) {
                    fileContent.append(line).append("\n");
                }
                // Append the file contents to the chat window
                jTextArea1.append(fileContent.toString());
            } catch (FileNotFoundException e) {
                JOptionPane.showMessageDialog(this, "File not found: " + selectedFile.getName(), "Error", JOptionPane.ERROR_MESSAGE);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error reading file: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {
        // Create a file chooser for saving
        JFileChooser fileChooser = new JFileChooser();
        // Set a filter to suggest .txt files
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Text Files (*.txt)", "txt");
        fileChooser.setFileFilter(filter);
        // Suggest a default file name
        fileChooser.setSelectedFile(new File("chat_history.txt"));
        // Show the save dialog
        int result = fileChooser.showSaveDialog(this);
        // If the user selects a file to save
        if (result == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            // Ensure the file has a .txt extension
            if (!file.getAbsolutePath().endsWith(".txt")) {
                file = new File(file.getAbsolutePath() + ".txt");
            }
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(file))) {
                // Write the contents of jTextArea1 to the file
                writer.write(jTextArea1.getText());
                JOptionPane.showMessageDialog(this, "Chat history saved successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error saving file: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {
        // Add timestamp to logout message
        String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("HH:mm:ss"));
        String x = "[" + timestamp + "] ***** " + name + " has logged out from the chat room *****";
        byte buf[] = x.getBytes();
        try {
            InetAddress group = InetAddress.getByName("230.0.0.1");
            DatagramPacket packet = new DatagramPacket(buf, buf.length, group, 4446);
            s.send(packet);
        } catch (Exception e) {
        }
        x = "exited";
        buf = x.getBytes();
        try {
            InetAddress group = InetAddress.getByName("230.0.0.2");
            DatagramPacket packet = new DatagramPacket(buf, buf.length, group, 5000);
            s.send(packet);
            socket.leaveGroup(address);
            s.close();
        } catch (Exception e) {
        }
        this.setVisible(false);
        new ChatApp().setVisible(true);
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        String text = jTextArea2.getText();
        if (!text.equals("")) {
            // Add timestamp to the message
            String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("HH:mm:ss"));
            message = "[" + timestamp + "] " + name + ": " + text;
            try {
                byte[] buf;
                buf = message.getBytes();
                InetAddress group = InetAddress.getByName("230.0.0.1");
                DatagramPacket packet = new DatagramPacket(buf, buf.length, group, 4446);
                s.send(packet);
                // Notify others that typing has stopped
                isTyping = false;
                sendTypingIndicator(false);
            } catch (IOException e) {
                MulticastClient.socket.close();
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MulticastClient().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    public static javax.swing.JTextArea jTextArea1;
    public static javax.swing.JTextArea jTextArea2;
    public static javax.swing.JTextArea jTextArea3;
    // End of variables declaration
}

class Client implements Runnable {
    private String lastTypingUser = null; // Track the last user who was typing

    Client() {
        try {
            MulticastClient.socket = new MulticastSocket(4446);
            MulticastClient.s = new DatagramSocket();
            MulticastClient.address = InetAddress.getByName("230.0.0.1");
            MulticastClient.socket.joinGroup(MulticastClient.address);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(new ChatApp(), "Sorry,Cannot bind");
        }
    }

    @Override
    public void run() {
        Thread t3 = new Thread(new OnlineStatus());
        t3.start();
        Thread t4 = new Thread(new ReceiveOnlineStatus());
        t4.start();
        newUser();

        while (true) {
            try {
                DatagramPacket packet;
                byte[] buf = new byte[256];
                packet = new DatagramPacket(buf, buf.length);
                MulticastClient.socket.receive(packet);
                String received = new String(packet.getData(), 0, packet.getLength());
                if (received.startsWith("TYPING#")) {
                    String typingUser = received.split("#")[1];
                    if (!typingUser.equals(MulticastClient.name) && !typingUser.equals(lastTypingUser)) {
                        lastTypingUser = typingUser;
                        MulticastClient.jTextArea1.setText(MulticastClient.jTextArea1.getText() + typingUser + " is typing...\n");
                    }
                } else if (received.startsWith("STOP_TYPING#")) {
                    String typingUser = received.split("#")[1];
                    if (typingUser.equals(lastTypingUser)) {
                        lastTypingUser = null;
                        // Remove the typing indicator by refreshing the chat window (excluding the last "is typing..." message)
                        String currentText = MulticastClient.jTextArea1.getText();
                        int lastTypingIndex = currentText.lastIndexOf(typingUser + " is typing...");
                        if (lastTypingIndex != -1) {
                            MulticastClient.jTextArea1.setText(currentText.substring(0, lastTypingIndex));
                        }
                    }
                } else {
                    // Clear any existing typing indicator from this user
                    if (lastTypingUser != null) {
                        String currentText = MulticastClient.jTextArea1.getText();
                        int lastTypingIndex = currentText.lastIndexOf(lastTypingUser + " is typing...");
                        if (lastTypingIndex != -1) {
                            MulticastClient.jTextArea1.setText(currentText.substring(0, lastTypingIndex));
                        }
                        lastTypingUser = null;
                    }
                    MulticastClient.jTextArea1.setText(MulticastClient.jTextArea1.getText() + received + "\n");
                    MulticastClient.jTextArea2.setText("");
                }
            } catch (IOException e) {
                System.err.println(e);
            }
        }
    }

    void newUser() {
        // Add timestamp to login message
        String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("HH:mm:ss"));
        String x = "[" + timestamp + "] ***** " + name + " has logged into the chat room *****";
        byte buf[] = x.getBytes();
        try {
            InetAddress group = InetAddress.getByName("230.0.0.1");
            DatagramPacket packet = new DatagramPacket(buf, buf.length, group, 4446);
            s.send(packet);
        } catch (Exception e) {
        }
        // Send the username to the online users group
        x = name;
        buf = x.getBytes();
        try {
            InetAddress group = InetAddress.getByName("230.0.0.2");
            DatagramPacket packet = new DatagramPacket(buf, buf.length, group, 5000);
            s.send(packet);
        } catch (Exception e) {
        }
    }
}